 
/****** Object:  StoredProcedure [dbo].[A_SP_FC_SPLIT]    Script Date: 7-3-2023 10:53:21 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO



-- template stored procedure for loading data from source tables
CREATE OR ALTER  PROCEDURE [dbo].[A_SP_FC_SPLIT]
 @activity_id int = 0 
,@forecast_id int = 0 -- run imports for a forecast_id
,@session_id nvarchar(50)  = null -- session id for loging, keep empty for an autogenerated uid
,@commands varchar(2000)='' -- '-LOG_ROWCOUNT -LOG_INSERT -LOG_DELETE' --'-PRINT' -NOGROUPBY -SUMFIELDS -SET_IMPORT_ID -NODELTA
,@procedure_name nvarchar(200)=''
,@site_id int =0
,@import_id int =0
,@category nvarchar(200) ='' -- procedure category to run; empty to run all
AS
BEGIN

    SET NOCOUNT ON;
    SET DATEFIRST 1
    DECLARE @SP varchar(20) = 'A_SP_FC_SPLIT';
--  configuration
    DECLARE @sqlCommand NVARCHAR(MAX) =''-- 
    
--  source data parameters
	DECLARE @filter nvarchar(4000)=''           -- where filter for filtering source data
	DECLARE @date_import_from date='9999-01-01' -- calculated by the import query using imports and procedures fields
	DECLARE @date_import_until date='1900-01-01'
	DECLARE @fields_source varchar(2000)=''     -- source fields
	DECLARE @fields_target varchar(2000)=''     -- target fields value1
	DECLARE @schedule varchar(2000)=''
	DECLARE @source varchar(2000)=''
	DECLARE @group_by varchar(2000)=''

-- target parameters
    DECLARE @fact_day nvarchar(200) ='[A_FACT_DAY]' -- data per day stored here
    DECLARE @fact_intraday nvarchar(200)='[A_FACT_INTRADAY]' -- data per day/interval_id is stored here. conform a_time_interval dimension
    
    -- parameters
	DECLARE @p1 varchar(2000)=''                
	DECLARE @p2 varchar(2000)=''
	DECLARE @p3 varchar(2000)=''
	DECLARE @p4 varchar(2000)=''
	DECLARE @p5 varchar(2000)=''
	DECLARE @groupby varchar(2000)=''

	-- log variables
	DECLARE @data  varchar(4000)=''  -- log data
	DECLARE @rows INT   -- keep affected rows
	DECLARE @start_time datetime=null
    DECLARE @output nvarchar(max)='';
    DECLARE @imports_fetched int=0
    DECLARE @errors int = 0 ; -- import errors
    DECLARE @errors_global int = 0; 
    DECLARE @rows_deleted_global INT = 0;
    DECLARE @rows_inserted_global INT = 0;
    DECLARE @summary varchar(200) = '';  

    

	-- source data analysis
	DECLARE @date_source_min date='9999-01-01' -- calculated by the import query using imports and procedures fields
	DECLARE @date_source_max date='1900-01-01'
    DECLARE @day_source varchar(max)=''

	-- intraday parameters
	DECLARE @intraday_join varchar(2000)=''
	DECLARE @intraday_interval_id varchar(200)='interval_id'
	DECLARE @intraday_duration varchar(5)='15' -- default intraday interval duration in min
    DECLARE @intraday_source varchar(max)=''

    -- procedure specific = p5
    DECLARE @coef real=1;

    IF @session_id is null BEGIN SET @session_id=newid() END
    SET @commands = @commands + ' -NODELTA '; -- SPLIT cannot be DELTA BASED
	DECLARE TAB_CURSOR CURSOR  FOR 
    SELECT import_id 
 	  ,[activity_id]
      ,[forecast_id]
      ,[p1]
      ,[p2]
      ,[p3]
      ,[p4]
      ,[p5]
      ,[date_import_from]
      ,[date_import_until]
      ,[fields_source]
      ,[fields_target]
      ,[schedule]
      ,[filter]
      ,[source]
      ,[group_by]
	  ,concat(@commands,' ',commands)
	  ,[procedure_name]
      ,site_id
    FROM   dbo.[A_IMPORT_RUN]
    WHERE (import_id=@import_id or @import_id=0) 
    AND  procedure_code='A_SP_FC_SPLIT'
    AND  (site_id=@site_id or @site_id=0)   
    AND (@procedure_name = '' or [procedure_id] = try_convert(int,@procedure_name) or [procedure_name] like @procedure_name ) 
	AND (activity_id=@activity_id or @activity_id=0)
    AND ([category] like @category or @category='')
    AND active=1
    ORDER BY [sort_order], [procedure_name];
     
	EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @session=@session_id, @site = @site_id, @object=@SP, @step='SQL SP START', @data=@commands,@result='Succeeded'
	SET @start_time = GETDATE();

----------------------------------------------
--  FETCH ALL IMPORTS FOR THE CURRENT SP
----------------------------------------------
	OPEN TAB_CURSOR 

	FETCH NEXT FROM TAB_CURSOR 

	INTO   @import_id 
 			,@activity_id
     		,@forecast_id
     		,@p1
     		,@p2
     		,@p3
     		,@p4
     		,@p5
     		,@date_import_from
     		,@date_import_until
     		,@fields_source
     		,@fields_target
     		,@schedule
     		,@filter
     		,@source
     		,@group_by
			,@commands
			,@procedure_name
            ,@site_id 

	WHILE @@FETCH_STATUS = 0 

   		BEGIN 

        SET @errors = 0 ;

        DECLARE @on_schedule bit=1;
        SET @imports_fetched=@imports_fetched+1;
        SET @coef = try_convert(real,replace(@p5,',','.'))
        IF @coef=0 SET @coef=1; 

        -- test parameters before running all
        IF @filter='' BEGIN
            SET @errors=@errors+1 
            SET @data= '-- <b>Error: [filter] parameter should define a timeserie data. </b><br>';
            SET @output=@output+ @data;    
            EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step='IMPORT FILTER TEST', @data=@data,@result='Failed'

        END
        ELSE SET @filter=@filter + ' AND F.site_id='+convert(varchar(10),@site_id);

        IF @source='' BEGIN
            SET @errors=@errors+1 ;
            SET @data = '-- <b>Error: [source] parameter should have space separated values to be splitted. </b><br>';
            SET @output=@output+@data;   
            EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step='SPLIT SOURCE TEST', @data=@data,@result='Failed';
        END
        ELSE SET @source=replace(@source,',','.'); -- always use . dot for the decimals, replace any , commas

        IF @schedule>'' BEGIN
            SET @sqlCommand = N'SELECT @on_schedule =  CASE WHEN ' +@schedule + ' THEN 1 ELSE 0 END'
            EXEC sp_executesql @sqlCommand, N'@on_schedule bit OUTPUT', @on_schedule=@on_schedule OUTPUT
        END 

        -- if source or target fields are empty set it by default to all value fields
        IF @fields_source='' BEGIN 
            SET @fields_source='[value1]';        
            SET @output=@output+'<br>-- <i>WARNING: Source fields are not specified. Setting default value1. </i>';
        END

        -- if source or target fields are empty set it by default to all value fields
        IF @fields_target=''  BEGIN 
            SET @fields_target='[value1]';
            SET @output=@output+'<br>-- <i>WARNING: Target field was not specified. Setting default value1s. </i>';
        END

        IF @activity_id=0 OR @forecast_id=0 SET @errors=@errors+1 ;
        
        if @coef=0 BEGIN SET @coef=1; SET @output=@output+'-- <b>WARNING: coeficient [p5] is not set or set to 0. Setting 1 by default.</b><br>';END
        IF @date_import_until<@date_import_from  BEGIN 
            SET @errors=@errors+1 ;
            SET @data ='-- <b>ERROR: Import from date is later than import until. Please check scheduling parameters.</b><br>';   
            SET @output=@output+ @data;  
            EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step='NO SOURCE TOTALS', @data=@data,@result='Failed';
        END    

	----------------------------------------------------------------------------------------------------------------------
	--  CLEAN DAY
	--------------------------------------------------------------------------------
		SET @sqlCommand = 
 		' DELETE FROM '+ @fact_day +' WHERE activity_id =' +  convert(nvarchar(max),@activity_id) 
    + '	AND forecast_id = ' +  convert(varchar(10),@forecast_id)
    + '	AND site_id = ' +  convert(varchar(10),@site_id) 
    + ' AND [date] BETWEEN ''' + convert(char(10),@date_import_from,126)  + ''' AND ''' + convert(char(10),@date_import_until,126) + ''';';
        SET @output=@output+'<br>-- DELETING DAY DATA <br>'+@sqlCommand+'<br><br>';

        IF @commands like '%-PRINT%' PRINT @sqlCommand
        ELSE BEGIN TRY			 
                IF @errors=0 BEGIN 
                    IF (@on_schedule=1 OR @commands like '%-NOSCHEDUL%' ) BEGIN
                        EXEC( @sqlCommand); SET @rows= @@ROWCOUNT;
                        
                        SET @rows_deleted_global=@rows_deleted_global+@rows;
                        SET @output=@output+'-- Number of day records deleted ' + convert(varchar(10),@rows)+'<br><br>';

                        IF @commands like '%-LOG_ROWCOUNT%' EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Succeeded', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step='-LOG_ROWCOUNT DELETED',@data=@fact_day, @value=@rows; 
                        IF @commands like '%-LOG_DELETE%' EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Succeeded', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step='-LOG_DELETE', @data=@sqlCommand; 

                    END
                    ELSE SET @output=@output+'-- <b>WARNING: Delete query was not executed due to the schedule parameter.</b> <br>';
                END
                ELSE SET @output=@output+'-- <b>ERROR: Queries will not be executed due to errors. Please check the parameters.</b><br>';                      
 		END TRY
 		BEGIN CATCH  
            SET @errors=@errors+1;
            SET @data=dbo.[A_FN_SYS_ErrorJson]() 
            SET @sqlCommand = @sqlCommand + '/* error information:' + @data + '*/';
            PRINT @sqlCommand;
            SET @output=@output+'<br>ERROR on delete day data.<br>'+@data+'<br><br>';
            EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step='DELETE DAY DATA', @data=@sqlCommand, @result='Failed';
   
 		END CATCH;   

	--------------------------------------------------------------------------------------------------------------------------
	--  INSERT TO DAY
	-------------------------------------------------------------------------------------
 		 
		SET @sqlCommand = '
        WITH D AS (
        select T.date, D.day_weight*M.total * ' + convert(varchar(max),@coef) + ' as value1
        FROM (
            SELECT T.day_year, F.date, T.year_month_char, value1  
        , value1 / sum(value1) over (partition by T.year_month_char) day_weight
        , dense_rank() over (order by T.year_month_char ) as total_id
        FROM A_TIME_DATE T INNER JOIN '+ @fact_day +' F on F.date=T.date
        WHERE ' + @filter + ' and month(T.date)*100+day(T.date)<>10229) D inner join 
        (SELECT TRY_CONVERT(real,value) total
        ,ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS total_id
        FROM STRING_SPLIT(''' + dbo.[A_FN_STRING_SPACES](replace(@source,',','.')) + ''','' '')) M on D.total_id=M.total_id
        INNER JOIN A_TIME_DATE T on T.day_year=D.day_year  
        WHERE T.date between ''' + convert(char(10),@date_import_from,126)  + ''' AND ''' + convert(char(10),@date_import_until,126) + ''')
        
        INSERT INTO '+ @fact_day 
        +' ([date],activity_id,forecast_id, import_id,' + @fields_target + ',site_id) 
        select date,' +  convert(nvarchar(max),@activity_id)  
   		+ ', ' +  convert(nvarchar(max),@forecast_id) + ','+ convert(nvarchar(max),@import_id) + ','
        + @fields_source + ',' + convert(nvarchar(max),@site_id) + ' FROM D;'

        SET @output=@output+ '-- INSERTING DAY DATA <br>'+ @sqlCommand + '<br><br>';
 		IF @commands like '%-PRINT%' PRINT @sqlCommand	
        ELSE BEGIN TRY			         
            IF @errors=0 BEGIN 
                IF (@on_schedule=1 OR @commands like '%-NOSCHEDUL%' ) BEGIN
                    EXEC( @sqlCommand); SET @rows= @@ROWCOUNT
                    SET @rows_inserted_global=@rows_inserted_global+@rows;
                    IF @commands like '%-LOG_ROWCOUNT%' EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Succeeded', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step='-LOG_ROWCOUNT INSERT',@data=@fact_day, @value=@rows; 
                    IF @commands like '%-LOG_INSERT%' EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Succeeded', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step='-LOG_INSERT', @data=@sqlCommand; 
                    SET @output=@output+'day records inserted ' + convert(varchar(10),@rows)+'<br><br>'  
                END
                ELSE SET @output=@output+'-- <b>WARNING: Delete query was not executed due to the schedule parameters.</b> <br>'
            END
            ELSE SET @output=@output+'-- <b>ERROR: Queries will not be executed due to errors. Please check the parameters.</b><br>'       
        END TRY
   		BEGIN CATCH  
            SET @errors=@errors+1;
   			SET @data=dbo.[A_FN_SYS_ErrorJson](); 
            SET @output=@output+'<br>ERROR on insert day: <br>'+@data+'<br>'+@sqlCommand+'<br>';
            SET @sqlCommand = @sqlCommand + '/* error information:' + @data + '*/';
            PRINT @sqlCommand;
            EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step='INSERT DAY DATA', @data=@sqlCommand, @result='Failed';
   
        END CATCH;   	  

        SET @errors_global=@errors_global+@errors;

 		FETCH NEXT FROM TAB_CURSOR 
 		INTO @import_id 
 			,@activity_id
     		,@forecast_id
     		,@p1
     		,@p2
     		,@p3
     		,@p4
     		,@p5
     		,@date_import_from
     		,@date_import_until
     		,@fields_source
     		,@fields_target
     		,@schedule
     		,@filter
     		,@source
     		,@group_by
			,@commands 
			,@procedure_name
            ,@site_id 
   		END -- END OF FETCHING IMPORTS

	CLOSE TAB_CURSOR 
	DEALLOCATE TAB_CURSOR

    IF @imports_fetched=0 BEGIN
        SET @data= 'No active imports found for A_SP_FC_SPLIT SQL SP. Try to check the procedure name and other parameters ';
        SET @output=@output + '<br>' + @data;
        PRINT @data; 
    END

	SET @data=format(DATEDIFF(MILLISECOND,@start_time,getdate())/1000.0,'N3')
    SET  @summary='{}'
		set  @summary=JSON_MODIFY( @summary,'$.ImportsFetched',CONVERT(varchar(10), @imports_fetched))
		set  @summary=JSON_MODIFY( @summary,'$.RowsDeleted',CONVERT(varchar(10), @rows_deleted_global))
		set  @summary=JSON_MODIFY( @summary,'$.RowsInserted',CONVERT(varchar(10), @rows_inserted_global))
        set  @summary=JSON_MODIFY( @summary,'$.Errors',CONVERT(varchar(10), @errors_global))
		 
	EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @session=@session_id, @site = @site_id, @object=@SP
    , @step='SQL SP FINISH', @duration=@data, @result='Succeeded', @data=@summary;

    SET @output=@output + '<br>Procedure finished. It took ' + @data + ' sec.'
    PRINT 'Procedure '+ @procedure_name+ ' finished. It took ' + @data + ' sec.';

    DECLARE @version nvarchar(max)='
    <br><i>VERSION INFORMATION </i>
    -- VERSION 230131 
    -- P5 got scaling coefficient role, use 0.5 to scale value1 * 0.5
    -- target fields can have duplicates value1,value2 from source field value1,value1
    -- VERSION 221230
    -- Source replace any commas by dots for decimals
    -- reference filter can be a period in the past or any period (not per ce a forecasted period)
    -- VERSION 221219 
    -- SPLIT FUNCTION switched to spaces, for easy copy paste from excel.
    -- new string function added for handling special characters from Excel
    -- NODELTA parameter is default for SP SPLIT
    --  VERSION 220727
    --  Order of where parameters set to activity first for index reusage.
'
    IF @commands like '%-VERSION%'  BEGIN SET @output = @output + @version; PRINT @version; END 

    DECLARE @help nvarchar(max)='<br><i>HELP INFORMATION</i>
    <br>
    <br> An import procedure for splitting space separated montly totals ([source] parameter) to days proportional to a timeseries defined by [filter].
    <br> Example:
    <br> source=120167.5 106857 115187 109621 118050 117460 119799 117152 110963 112695 114696 121626
    <br> filter=activity_id=99 and forecast_id=1 and year=2022
    <br> Schedule date_import_from = ''2022-01-01'' date_import_until = ''2022-12-31''
    <br> Historical data is selected accroding to the filter , grouped per day and a month weight is assigned to each day. 
    <br> The total for the first month (120167.5) is splitted among the days of the first month in the period between date_import_from and date_import_until
    <br> according to the first month day weights. 
    <br>
    <br>SP PARAMETERS
    <br>@activity_id int = 0     -- run imports for an activity_id or 0 for all.
    <br>@import_id int = 0       -- run import_id or 0 for all.
    <br>@session_id nvarchar(50)  = null -- session id for loging, keep empty for an autogenerated uid.
    <br>@procedure_name nvarchar(200)=A_SP_FC_SPLIT -- the app / procedure name to run
    <br>@site_id int = 0 -- site to run
    <br>@commands varchar(2000)
    
    <br><br>Inherited parameters from procedure or import configuration:
    <br>[Source] - a list , comma separated with totals per month. the first value will map with the first month, determined by the [Filter] parameter. To be used at import level, leave empty at the procedure level.
    <br>[Fields source] - not used
    <br>[Fields target] - a single value column name, value1 used as default
    <br>[Filter] - eg. [year]=2022 and activity_id=372 and forecast_id=4 
    <br>a serie filter including activity, forecast and the date range covered by the [source]. 
    <br>Months will be mapped in the order. You can use all fields from [a_time_date] table and a_fact_day table keys, 
    <br>(eg activity_id, forecast_id). if you use [date] field please use D.date to avoid a join ambiguity.
    <br>
    <br>p5 - scaling coefficient, default is 1. = '+ convert(varchar(max),@coef)+';
    <br>Supported commands:
    <br>Commands from the procedure and the import will be added to the list (combined) 
    <br><table>
    <tr><td>-PRINT          </td><td>Let skip execution to only output the queries and information.</td></tr>
    <tr><td>-NOGROUPBY      </td><td>Cancels grouping by by group by/date field.</td></tr>
    <tr><td>-SUMFIELDS      </td><td>Adds sum function for all source fields given that a simple commaseparated list is provided.</td></tr>
    <tr><td>-NODELTA        </td><td>Skips any source date range detaction and loads data according to [Date Import From]/[Date Import Until] parameters.</td></tr>
    <tr><td>-INTRADAY       </td><td>Triggers intraday table update. Additional p1 parameter let setup interval detection logic. By default the source must have interval_id field in line with A_TIME_INTERVAL table</td></tr>
    <tr><td>-NOINTRADAY     </td><td>Skips intraday update even if it was set up in a procedure or an import.</td></tr>
    <tr><td>-LOG_ROWCOUNT   </td><td>Logs a number of rows affected after all executions to A_SYS_LOG.</td></tr>
    <tr><td>-LOG_INSERT     </td><td>Logs insert queries.</td></tr>
    <tr><td>-LOG_DELETE     </td><td>Logs delete queries.</td></tr>
    <tr><td>-NOSCHEDULE     </td><td>Supress scheduling if any and force queries execution.</td></tr>
    <tr><td>-VERSION        </td><td>Outputs the version information.</td></tr>
    <tr><td>-HELP           </td><td>Outputs help information.</td></tr>
    <tr><td> </td><td></td></tr>
    </table>
    '
    IF @commands like '%-HELP%'  BEGIN SET @output = @output + @help ; PRINT @help; END 
    IF @commands like '%-OUTPUT%'  select @output as SQL_OUTPUT

END

