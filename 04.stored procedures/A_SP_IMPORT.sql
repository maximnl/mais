USE [Anwb_Rhl]
GO
/****** Object:  StoredProcedure [dbo].[A_SP_IMPORT]    Script Date: 4-9-2024 11:08:56 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO

-- generic import procedure for importing source data into A_FACT_DAY and A_FACT_INTRADAY time series tables
-- option to update the source table records with the import_id according to import where conditions

ALTER   PROCEDURE [dbo].[A_SP_IMPORT]
-- SP Parameters defined at interface/ SP level / to select and batch run several imports after each other
 @activity_id int = 0 -- run imports for an activity_id
,@forecast_id int = 0 -- run imports for a forecast_id
,@import_id int = 0 -- run import_id
,@session_id nvarchar(50)  = null -- session id for loging, keep empty for an autogenerated uid
,@commands varchar(2000)='' -- '-PRINT -LOG_ROWCOUNT -NOGROUPBY -SUMFIELDS -NOINTRADAY -NODELTA -FORCEDELTA -INTRADAY -VERSION -HELP -NOSCHEDULE; see HELP for docs
,@procedure_name nvarchar(200)='' -- run procedure name or empty for all procedures 
,@site_id int = 0 -- site to run
,@category nvarchar(200) = '' -- procedure category to run; empty to run all
,@p varchar(2000) = '{}' --  for passing parameters in JSON format
AS
BEGIN

    DECLARE @SP varchar(20) = 'A_SP_IMPORT'; 
  
-- SNIPPET INIT ********************************************************
	SET NOCOUNT ON;
    SET DATEFIRST 1  -- SET MONDAY AS THE FIRST DAY OF WEEK 
    SET ANSI_WARNINGS OFF

	-- IMPORT INTERFACE PARAMETERS PASSED FROM THE IMPORT CONFIGURATION	
	DECLARE @p1 varchar(2000)=''  -- parameters
	DECLARE @p2 varchar(2000)=''
	DECLARE @p3 varchar(2000)=''
	DECLARE @p4 varchar(2000)=''
	DECLARE @p5 varchar(2000)=''
	DECLARE @date_import_from date='9999-01-01' -- calculated by the import query using imports and procedures fields
	DECLARE @date_import_until date='1900-01-01'
	DECLARE @fields_source varchar(2000)='' -- source fields
	DECLARE @fields_target varchar(2000)=''  -- target fields value1
	DECLARE @schedule varchar(2000)=''
	DECLARE @filter nvarchar(4000)='' -- where filter for filtering source data
	DECLARE @source varchar(2000)=''
	DECLARE @date varchar(2000)=''
    DECLARE @parent varchar(200)=''

	-- PROCEDURE SUPPORT GLOBAR VARIABLES
	DECLARE @output nvarchar(max)='';
	DECLARE @imports_fetched int=0
	DECLARE @start_time datetime=null
	DECLARE @step varchar(200)=''
    DECLARE @errors_global int = 0; 
	DECLARE @warnings_global int =0;
    DECLARE @rows_deleted_global INT = 0;
    DECLARE @rows_inserted_global INT = 0;
	DECLARE @rows_updated_global INT = 0;

    IF @session_id is null SET @session_id=newid();    
--------------------------------------------------------------------------------------------------
	SET @step='SQL SP START';
--------------------------------------------------------------------------------------------------
	EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @session=@session_id, @site = @site_id, @object=@SP, @step=@step, @data=@commands,@result='Succeeded'
	SET @start_time     = GETDATE()
	
	DECLARE TAB_CURSOR CURSOR  FOR 
    SELECT import_id 
 	  ,[activity_id]
      ,[forecast_id]
      ,[p1]
      ,[p2]
      ,[p3]
      ,[p4]  
      ,[p5]  
      ,[date_import_from]
      ,[date_import_until]
      ,[fields_source]
      ,[fields_target]
      ,[schedule]
      ,[filter]
      ,[source]
      ,[group_by]
	  ,concat(@commands,' ',commands)
	  ,[procedure_name]
	  ,site_id
      ,parent
    FROM   dbo.[A_IMPORT_RUN]
    WHERE   (import_id=@import_id or @import_id=0) 
    AND (site_id=@site_id or site_id is null or @site_id=0)
    AND ([procedure_id] = try_convert(int,@procedure_name) or [procedure_name] like @procedure_name or @procedure_name='') 
    AND (activity_id=@activity_id or @activity_id=0)
    AND procedure_code=@SP 
    AND active=1
    ORDER BY [sort_order],[procedure_name]

	----------------------------------------------
	--  FETCH ALL IMPORTS FOR THE CURRENT SP
	----------------------------------------------
	OPEN TAB_CURSOR 
	FETCH NEXT FROM TAB_CURSOR 
	INTO     @import_id 
 			,@activity_id
     		,@forecast_id
     		,@p1
     		,@p2
     		,@p3
     		,@p4
     		,@p5
     		,@date_import_from
     		,@date_import_until
     		,@fields_source
     		,@fields_target
     		,@schedule
     		,@filter
     		,@source
     		,@date
			,@commands
			,@procedure_name 
			,@site_id
            ,@parent
	WHILE @@FETCH_STATUS = 0 
   	BEGIN 

		-- IMPORT SUPPORT VARIABLES 
		DECLARE @fact_day nvarchar(200)='[A_FACT_DAY]' -- day dataset 
		DECLARE @fact_intraday nvarchar(200)='[A_FACT_INTRADAY]' -- intraday dataset  
		DECLARE @sqlCommand NVARCHAR(MAX) -- 	
		DECLARE @data  varchar(4000)=''  -- log data
		DECLARE @rows INT=0   -- keep affected rows
		DECLARE @rows_deleted INT=0
		DECLARE @rows_inserted INT=0
		DECLARE @rows_updated INT = 0;
		DECLARE @errors int = 0 ; -- import errors
		DECLARE @warnings int =0;
		DECLARE @start_time_step datetime=null
		DECLARE @start_time_import datetime=null
		DECLARE @duration real=null	
		DECLARE @date_source_min date='9999-01-01' -- source date analysis for delta range
		DECLARE @date_source_max date='1900-01-01'
		DECLARE @day_source varchar(max)=''
		DECLARE @on_schedule bit=1

		SET @imports_fetched=@imports_fetched+1;
		SET @start_time_import     = GETDATE()

		-------------------------------------------------------
		SET @step= 'SCHEDULE TEST';
		-------------------------------------------------------
		SET @start_time_step     = GETDATE()
		IF @schedule>'' and @commands not like '%-NOSCHEDUL%'     BEGIN TRY
            SET @sqlCommand = N'SELECT @on_schedule =  CASE WHEN ' + @schedule + ' THEN ''1'' ELSE ''0'' END'
            EXEC sp_executesql @sqlCommand, N'@on_schedule bit OUTPUT', @on_schedule=@on_schedule OUTPUT
        END TRY
		BEGIN CATCH  
            SET @errors=@errors+1; SET @data=dbo.[A_FN_SYS_ErrorJson](); SET @output=@output+ '<b>error information ' + @data+'</b></br>' + @sqlCommand + '</br></br>';
            PRINT @data; PRINT @sqlCommand ; SET @data=@data + @sqlCommand;
            EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Failed', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
        END CATCH;   

		--------------------------------------------------------------------------------------------------
		SET @step = 'PARAMETERS TEST';
		--------------------------------------------------------------------------------------------------
		SET @start_time_step     = GETDATE()

		-- FOLLOWED ALWAYS BY A PROCEDURE SPECIFIC PARAMETERS SETUP AND TESTS

-- SNIPPET INIT END  *********************************************************


		-- PROCEDURE SPECIFIC SUPPORT VARIABLES 
		DECLARE @groupby varchar(1000) =''	
		DECLARE @source_import_id_field varchar(2000)='';
		-- intraday variables, used only in combination with the command -INTRADAY
		DECLARE @intraday_join varchar(2000)=''
		DECLARE @intraday_interval_id varchar(200)='interval_id'    -- intraday field name in the source
		DECLARE @intraday_duration varchar(5)='15' -- default intraday interval duration in min
		DECLARE @intraday_source varchar(max)=''		
		IF @source='' SET @intraday_source=@fact_intraday + ' WITH (NOLOCK) ' ELSE SET @intraday_source=@source; 

        IF @fields_source='' OR @fields_target='' BEGIN 
            SET @fields_source='[value1],[value2],[value3],[value4],[value5],[value6],[value7],[value8],[value9],[value10]';
            SET @fields_target='[value1],[value2],[value3],[value4],[value5],[value6],[value7],[value8],[value9],[value10]';
			IF @commands like '%-LOG_WARNING%' BEGIN
				SET @data='WARNING: [source_fields] or [target_fields] parameters are not specified. Setting defaults.
				 import id= ' + convert(varchar(10),@import_id) + ' Step: ' + @step; 
				PRINT @data; SET @output=@output+'<b>' + @data + '</b><br>';  
				EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Warning', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data;   
			END
        END

        IF @filter='' BEGIN
            SET @filter='1=1'; 
			IF @commands like '%-LOG_WARNING%' BEGIN
				SET @data='WARNING: [filter] parameter was not set. All source data will be used.
				 import id= ' + convert(varchar(10),@import_id)  + ' Step: ' + @step; 
				PRINT @data; SET @output=@output+'<b>' + @data + '</b><br>';  
				EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Warning', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data;   
			END
		END
        
        SET @day_source=@source;        -- if source is a framework table than add site_id filter or set fact_day as default
        IF @source='' SET @day_source=@fact_day + 'WITH (NOLOCK)';
        IF @source like 'A_%' or @source like '[A_%' SET @filter=@filter + ' AND site_id=' + convert(varchar(10),@site_id);
		IF @commands not like '%-NOGROUPBY%' OR @commands like  '%-SUMFIELDS%' SET @groupby=concat(' GROUP BY ',@date); 
		IF @commands like '%-SUMFIELDS%' and @fields_source not like '%SUM(%)%' set @fields_source= concat('SUM(try_convert(real,',replace(@fields_source,',',')),SUM(try_convert(real,'),'))')   
		
		-- p (from SP interface) and p1 (from import interface) support json format, first merge them 
		BEGIN TRY
				IF @p like '{_%}' BEGIN
					IF @p1 like '{_%}' SELECT @p1 = JSON_MODIFY(@p1, CONCAT(N'$.', [Key]), value) FROM OPENJSON(@p) WHERE ISJSON(@p) > 0
					else SET @p1=@p 
				END
			 
				IF @p1 like '{_%}' BEGIN  
					DECLARE @d date = NULL;
					DECLARE @i int = NULL;
					DECLARE @s varchar(2000)= NULL;
					SET @s = (select isnull(JSON_VALUE(@p1,'$.source_import_id_field'),'')); IF @s>'' SET @source_import_id_field=@s;
					SET @d=(select try_convert(date,JSON_VALUE(@p1,'$.date_import_from'))); IF @d is not null SET @date_import_from=@d;
				 	SET @d=(select try_convert(date,JSON_VALUE(@p1,'$.date_import_until'))); IF @d is not null SET @date_import_until=@d;
					SET @i=(select try_convert(int,JSON_VALUE(@p1,'$.intraday_duration'))); IF @i>0 SET @intraday_duration=@i;		
				  print @p1;
				  print @date_import_from;
				END	 	 
		 
		END TRY
		BEGIN CATCH  
				SET @errors=@errors+1;
				SET @data=dbo.[A_FN_SYS_ErrorJson]();
				SET @output=@output+'<b>Error: ' +@data+'</b></br></br>';
				PRINT 'ERROR.'; PRINT @data; 
				EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Failed', @session=@session_id, @site = @site_id, @object=@SP,
				@object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
     		END CATCH;   

		--------------------------------------------------------------------------------	
		SET @step='DELTA DETECTION'
		----------------------------------------------------------------------------------------------------------------------
        IF (@commands NOT like '%-NODELTA%' OR @commands like '%-FORCEDELTA%') AND (@on_schedule=1 ) BEGIN
			DECLARE @dates varchar(30)
			SET @sqlCommand = 'select @dates = try_convert(char(10),try_convert(date,isnull(min(' + @date 
				+ '),''9999-01-01'')),126) + try_convert(char(10),try_convert(date,isnull(max(' + @date 
				+ '),''1900-12-31'')),126) FROM ' + @day_source +' WHERE ' + @filter;
			BEGIN TRY
				EXEC sp_executesql @sqlCommand, N'@dates varchar(30) OUTPUT', @dates=@dates OUTPUT
				SET @date_source_min=left(@dates,10);
				SET @date_source_max=right(@dates,10);
				IF @date_import_from<@date_source_min BEGIN SET @date_import_from=@date_source_min; END
				IF @date_import_until>@date_source_max BEGIN SET @date_import_until=@date_source_max; END
				IF @commands like '%-FORCEDELTA%'  
					BEGIN
						SET @date_import_from=@date_source_min;
						SET @date_import_until=@date_source_max; 
					END
			END TRY
     		BEGIN CATCH  
				SET @errors=@errors+1;
				SET @data=dbo.[A_FN_SYS_ErrorJson]();
				SET @output=@output+'<b>Error: ' +@data+'</b></br></br>';
				PRINT 'ERROR.'; PRINT @sqlCommand ; PRINT @data;
				SET @data= @data + @sqlCommand;
				EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Failed', @session=@session_id, @site = @site_id, @object=@SP,
				@object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
     		END CATCH;   
        END

		IF  @date_import_until<@date_import_from  BEGIN  
			SET @warnings=@warnings+1;
			IF @commands like '%-LOG_WARNING%' BEGIN
				SET @data='Warning: Date import from is larger than date import until. The import query will not be executed. 
				 import id= ' + convert(varchar(10),@import_id) + '. filter=' + @filter + ' Step: ' + @step; 
				PRINT @data; SET @output=@output+'<b>' + @data + '</b><br>';  
				EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Warning', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data;   
			END
		END

IF @commands  not like '%-NODAY%' BEGIN  

	--------------------------------------------------------------------------------	
		SET @step='DELETE DAY'
		----------------------------------------------------------------------------------------------------------------------
		SET @sqlCommand = 
 		  'DELETE FROM '+ @fact_day 
        + ' WHERE activity_id = ' +  convert(varchar(10),@activity_id) 
        + '	AND forecast_id = ' +  convert(varchar(10),@forecast_id)
        + '	AND site_id = ' +  convert(varchar(10),@site_id)
        + ' AND [date] BETWEEN ''' + convert(char(10),@date_import_from,126)  + ''' AND ''' + convert(char(10),@date_import_until,126) + ''';';
 		
-- SNIPPET QUERY EXECUTE START ********************************************************
		SET @start_time_step     = GETDATE();
		SET @rows=0;
		IF @commands like '%-LOG_QUER%' BEGIN
			SET @data = @step +  ' QUERY'; 
			SET @output=@output + @data + '<br>'+@sqlCommand+'<br><br>';  			 
			EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Debug', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name
			, @object_id=@import_id, @step=@step, @data=@sqlCommand; 
			PRINT @data; PRINT @sqlCommand;
		END
         
        IF @commands not like '%-PRINT%' AND  @date_import_until>=@date_import_from BEGIN TRY
            IF @errors=0 BEGIN 
                IF (@on_schedule=1 OR @commands like '%-NOSCHEDUL%' ) BEGIN
                    EXEC( @sqlCommand); SET @rows= @@ROWCOUNT;				
					
					SET @duration=convert(real,format(DATEDIFF(MILLISECOND,@start_time_step,getdate())/1000.0,'N3'))
					IF @commands like '%-LOG_ROWCOUNT%' BEGIN
						EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Succeeded', @session=@session_id, @duration=@duration
						, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step,@data=@sqlCommand, @value=@rows;
						SET @data=@step + ' query executed. import_id=' + convert(varchar(20),@import_id) + '. Total records ' + convert(varchar(10),@rows);
						SET @output=@output + @data +  '<br>';
						PRINT @data;
					END
                END
                ELSE BEGIN		-- not on schedule, no execution		
					SET @warnings=@warnings+1;
					IF @commands like '%-LOG_WARNING%' BEGIN
						SET @data = 'WARNING: ' + @step + ' query was not executed due to the scheduling parameter.';				
						PRINT @data;
						EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Warning', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
						SET @output=@output+'<b>' + @data +'</b> <br>';						
					END
				END
            END           
 		END TRY
 		BEGIN CATCH  
            SET @errors=@errors+1;
			SET @data=dbo.[A_FN_SYS_ErrorJson]();
			SET @data = @data + 'ERROR: ' +  'import_id=' + convert(varchar(10),@import_id) + ' STEP '  + @step;
            SET @output=@output+ '<b>' + @data+'</b></br>' + @sqlCommand + '</br></br>';
            PRINT @data; PRINT @sqlCommand ; 
			SET @data=@data + @sqlCommand;
            EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Failed', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
		END CATCH;   

-- SNIPPET QUERY EXECUTE END  *********************************************************

		SET @rows_deleted=@rows;	

		-------------------------------------------------------------------------------------
        SET @step='INSERT DAY';
		--------------------------------------------------------------------------------------------------------------------------	
		SET @sqlCommand = 'INSERT INTO '+ @fact_day 
        +' ([date],activity_id,forecast_id,import_id,' + @fields_target + ',site_id, date_updated)' + 
        ' SELECT ' + @date + ',' +  convert(varchar(10),@activity_id)  
   		+ ', ' +  convert(varchar(10),@forecast_id) + ','+ convert(varchar(10),@import_id)
   		+ ',' + @fields_source +','+ convert(varchar(10),@site_id) + ', getdate() '
 		+ ' FROM '+ @day_source +' WHERE ' + @filter  
		+ ' AND ' + @date + ' BETWEEN ''' + convert(char(10),@date_import_from,126)  + ''' AND ''' + convert(char(10),@date_import_until,126) + '''' + @groupby +';';
		
-- SNIPPET QUERY EXECUTE START ********************************************************
		SET @start_time_step     = GETDATE();
		SET @rows=0;
		IF @commands like '%-LOG_QUER%' BEGIN
			SET @data = @step +  ' QUERY'; 
			SET @output=@output + @data + '<br>'+@sqlCommand+'<br><br>';  			 
			EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Debug', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name
			, @object_id=@import_id, @step=@step, @data=@sqlCommand; 
			PRINT @data; PRINT @sqlCommand;
		END
         
        IF @commands not like '%-PRINT%' AND  @date_import_until>=@date_import_from BEGIN TRY
            IF @errors=0 BEGIN 
                IF (@on_schedule=1 OR @commands like '%-NOSCHEDUL%' ) BEGIN
                    EXEC( @sqlCommand); SET @rows= @@ROWCOUNT;				
					
					SET @duration=convert(real,format(DATEDIFF(MILLISECOND,@start_time_step,getdate())/1000.0,'N3'))
					IF @commands like '%-LOG_ROWCOUNT%' BEGIN
						EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Succeeded', @session=@session_id, @duration=@duration
						, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step,@data=@sqlCommand, @value=@rows;
						SET @data=@step + ' query executed. import_id=' + convert(varchar(20),@import_id) + '. Total records ' + convert(varchar(10),@rows);
						SET @output=@output + @data +  '<br>';
						PRINT @data;
					END
                END
                ELSE BEGIN		-- not on schedule, no execution		
					SET @warnings=@warnings+1;
					IF @commands like '%-LOG_WARNING%' BEGIN
						SET @data = 'WARNING: ' + @step + ' query was not executed due to the scheduling parameter.';				
						PRINT @data;
						EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Warning', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
						SET @output=@output+'<b>' + @data +'</b> <br>';						
					END
				END
            END           
 		END TRY
 		BEGIN CATCH  
            SET @errors=@errors+1;
			SET @data=dbo.[A_FN_SYS_ErrorJson]();
			SET @data = @data + 'ERROR: ' +  'import_id=' + convert(varchar(10),@import_id) + ' STEP '  + @step;
            SET @output=@output+ '<b>' + @data+'</b></br>' + @sqlCommand + '</br></br>';
            PRINT @data; PRINT @sqlCommand ; 
			SET @data=@data + @sqlCommand;
            EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Failed', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
		END CATCH;   

-- SNIPPET QUERY EXECUTE END  *********************************************************

		SET @rows_inserted=@rows;        
    END -- CHECK -NODAY NEGATIVE

		--------------------------------------------------------------------------------------------------------------------------    
		SET @step = 'UPDATE SOURCE IMPORT_ID';
		--------------------------------------------------------------------------------------------------------------------------
		
		SET @rows_updated=0;    
        IF @source_import_id_field>'' BEGIN
            SET @sqlCommand = 'UPDATE '+ @day_source 
            + ' SET ' + @source_import_id_field + '=' + convert(varchar(10),@import_id) 
   		    + ' WHERE ' + @filter  
		    + ' AND ' + @date + ' BETWEEN ''' + convert(char(10),@date_import_from,126)  + ''' AND ''' + convert(char(10),@date_import_until,126) + '''' +';';   
			
-- SNIPPET QUERY EXECUTE START ********************************************************
			SET @start_time_step     = GETDATE();
			SET @rows=0;
			IF @commands like '%-LOG_QUER%' BEGIN
				SET @data = @step +  ' QUERY'; 
				SET @output=@output + @data + '<br>'+@sqlCommand+'<br><br>';  			 
				EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Debug', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name
				, @object_id=@import_id, @step=@step, @data=@sqlCommand; 
				PRINT @data; PRINT @sqlCommand;
			END
         
			IF @commands not like '%-PRINT%' AND  @date_import_until>=@date_import_from BEGIN TRY
				IF @errors=0 BEGIN 
					IF (@on_schedule=1 OR @commands like '%-NOSCHEDUL%' ) BEGIN
						EXEC( @sqlCommand); SET @rows= @@ROWCOUNT;				
					
						SET @duration=convert(real,format(DATEDIFF(MILLISECOND,@start_time_step,getdate())/1000.0,'N3'))
						IF @commands like '%-LOG_ROWCOUNT%' BEGIN
							EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Succeeded', @session=@session_id, @duration=@duration
							, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step,@data=@sqlCommand, @value=@rows;
							SET @data=@step + ' query executed. import_id=' + convert(varchar(20),@import_id) + '. Total records ' + convert(varchar(10),@rows);
							SET @output=@output + @data +  '<br>';
							PRINT @data;
						END
					END
					ELSE BEGIN		-- not on schedule, no execution		
						SET @warnings=@warnings+1;
						IF @commands like '%-LOG_WARNING%' BEGIN
							SET @data = 'WARNING: ' + @step + ' query was not executed due to the scheduling parameter.';				
							PRINT @data;
							EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Warning', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
							SET @output=@output+'<b>' + @data +'</b> <br>';						
						END
					END
				END           
 			END TRY
 			BEGIN CATCH  
				SET @errors=@errors+1;
				SET @data=dbo.[A_FN_SYS_ErrorJson]();
				SET @data = @data + 'ERROR: ' +  'import_id=' + convert(varchar(10),@import_id) + ' STEP '  + @step;
				SET @output=@output+ '<b>' + @data+'</b></br>' + @sqlCommand + '</br></br>';
				PRINT @data; PRINT @sqlCommand ; 
				SET @data=@data + @sqlCommand;
				EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Failed', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
			END CATCH;   

-- SNIPPET QUERY EXECUTE END  *********************************************************

			SET @rows_updated=@rows;
        END --  IF @source_import_id_field>'' 

	----------------------------------------------------------------------------------------------------------------------
	--  PROCESS INTRADAY
	--------------------------------------------------------------------------------	
	IF @commands  like '%-INTRADAY%' AND @commands not like '%-NOINTRADAY%' BEGIN  

		-------------------------------------------------------------------------------------
        SET @step='DELETE INTRADAY';
		--------------------------------------------------------------------------------------------------------------------------
		SET @sqlCommand = 
 		'DELETE FROM '+  @fact_intraday 
        + ' WHERE activity_id = ' +  convert(varchar(10),@activity_id) 
        + '	AND forecast_id = ' +  convert(varchar(10),@forecast_id)
        + '	AND site_id = ' +  convert(varchar(10),@site_id)
        + ' AND [date] BETWEEN ''' + convert(char(10),@date_import_from,126)  + ''' AND ''' 
        + convert(char(10),@date_import_until,126) +''';';        

-- SNIPPET QUERY EXECUTE START ********************************************************
		SET @start_time_step     = GETDATE();
		SET @rows=0;
		IF @commands like '%-LOG_QUER%' BEGIN
			SET @data = @step +  ' QUERY'; 
			SET @output=@output + @data + '<br>'+@sqlCommand+'<br><br>';  			 
			EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Debug', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name
			, @object_id=@import_id, @step=@step, @data=@sqlCommand; 
			PRINT @data; PRINT @sqlCommand;
		END
         
        IF @commands not like '%-PRINT%' AND  @date_import_until>=@date_import_from BEGIN TRY
            IF @errors=0 BEGIN 
                IF (@on_schedule=1 OR @commands like '%-NOSCHEDUL%' ) BEGIN
                    EXEC( @sqlCommand); SET @rows= @@ROWCOUNT;				
					
					SET @duration=convert(real,format(DATEDIFF(MILLISECOND,@start_time_step,getdate())/1000.0,'N3'))
					IF @commands like '%-LOG_ROWCOUNT%' BEGIN
						EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Succeeded', @session=@session_id, @duration=@duration
						, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step,@data=@sqlCommand, @value=@rows;
						SET @data=@step + ' query executed. import_id=' + convert(varchar(20),@import_id) + '. Total records ' + convert(varchar(10),@rows);
						SET @output=@output + @data +  '<br>';
						PRINT @data;
					END
                END
                ELSE BEGIN		-- not on schedule, no execution		
					SET @warnings=@warnings+1;
					IF @commands like '%-LOG_WARNING%' BEGIN
						SET @data = 'WARNING: ' + @step + ' query was not executed due to the scheduling parameter.';				
						PRINT @data;
						EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Warning', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
						SET @output=@output+'<b>' + @data +'</b> <br>';						
					END
				END
            END           
 		END TRY
 		BEGIN CATCH  
            SET @errors=@errors+1;
			SET @data=dbo.[A_FN_SYS_ErrorJson]();
			SET @data = @data + 'ERROR: ' +  'import_id=' + convert(varchar(10),@import_id) + ' STEP '  + @step;
            SET @output=@output+ '<b>' + @data+'</b></br>' + @sqlCommand + '</br></br>';
            PRINT @data; PRINT @sqlCommand ; 
			SET @data=@data + @sqlCommand;
            EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Failed', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
		END CATCH;   

-- SNIPPET QUERY EXECUTE END  *********************************************************

	

-------------------------------------------------------------------------------------
        SET @step='INSERT INTRADAY';
		--------------------------------------------------------------------------------------------------------------------------
 		IF @commands not like '%-NOGROUPBY%' OR @commands like  '%-SUMFIELDS%' BEGIN SET @groupby = concat(' GROUP BY ', @date, ',',@intraday_interval_id) END ELSE SET @groupby=''
        
		SET @sqlCommand = 'INSERT INTO '+ @fact_intraday 
        +' ([date], activity_id, forecast_id, import_id, interval_id, duration_min,' + @fields_target + ',site_id, date_updated)'
        +' SELECT ' + @date + ',' +  convert(varchar(10),@activity_id)  
   		+ ',' +  convert(varchar(10),@forecast_id) + ','+ convert(varchar(10),@import_id)
   		+ ',' + @intraday_interval_id + ', '+ convert(varchar(10),@intraday_duration) + ',' + @fields_source 
        + ',' + convert(varchar(10),@site_id) + ', getdate() '
 		+ ' FROM '+ @intraday_source + '   WHERE ' + @filter  
		+ ' AND ' + @date + ' BETWEEN ''' + convert(char(10),@date_import_from,126)  + ''' AND ''' + convert(char(10),@date_import_until,126) + '''' 
        + @groupby +';';

		 
-- SNIPPET QUERY EXECUTE START ********************************************************
		SET @start_time_step     = GETDATE();
		SET @rows=0;
		IF @commands like '%-LOG_QUER%' BEGIN
			SET @data = @step +  ' QUERY'; 
			SET @output=@output + @data + '<br>'+@sqlCommand+'<br><br>';  			 
			EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Debug', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name
			, @object_id=@import_id, @step=@step, @data=@sqlCommand; 
			PRINT @data; PRINT @sqlCommand;
		END
         
        IF @commands not like '%-PRINT%' AND  @date_import_until>=@date_import_from BEGIN TRY
            IF @errors=0 BEGIN 
                IF (@on_schedule=1 OR @commands like '%-NOSCHEDUL%' ) BEGIN
                    EXEC( @sqlCommand); SET @rows= @@ROWCOUNT;				
					
					SET @duration=convert(real,format(DATEDIFF(MILLISECOND,@start_time_step,getdate())/1000.0,'N3'))
					IF @commands like '%-LOG_ROWCOUNT%' BEGIN
						EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Succeeded', @session=@session_id, @duration=@duration
						, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step,@data=@sqlCommand, @value=@rows;
						SET @data=@step + ' query executed. import_id=' + convert(varchar(20),@import_id) + '. Total records ' + convert(varchar(10),@rows);
						SET @output=@output + @data +  '<br>';
						PRINT @data;
					END
                END
                ELSE BEGIN		-- not on schedule, no execution		
					SET @warnings=@warnings+1;
					IF @commands like '%-LOG_WARNING%' BEGIN
						SET @data = 'WARNING: ' + @step + ' query was not executed due to the scheduling parameter.';				
						PRINT @data;
						EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Warning', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
						SET @output=@output+'<b>' + @data +'</b> <br>';						
					END
				END
            END           
 		END TRY
 		BEGIN CATCH  
            SET @errors=@errors+1;
			SET @data=dbo.[A_FN_SYS_ErrorJson]();
			SET @data = @data + 'ERROR: ' +  'import_id=' + convert(varchar(10),@import_id) + ' STEP '  + @step;
            SET @output=@output+ '<b>' + @data+'</b></br>' + @sqlCommand + '</br></br>';
            PRINT @data; PRINT @sqlCommand ; 
			SET @data=@data + @sqlCommand;
            EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Failed', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
		END CATCH;   

-- SNIPPET QUERY EXECUTE END  *********************************************************


	END -- end if intraday

    
-- SNIPPET FINISHING PROCEDURE ********************************************************
		--------------------------------------------------------------------------------------------------------------------------    
		SET @step = 'IMPORT SUMMARY';
		--------------------------------------------------------------------------------------------------------------------------
		SET @errors_global=@errors_global+@errors;
		SET @warnings_global=@warnings_global+@warnings;
		SET @rows_deleted_global=@rows_deleted_global+@rows_deleted;
		SET @rows_inserted_global=@rows_inserted_global+@rows_inserted;
		SET @rows_updated_global=@rows_updated_global+@rows_updated;
		SET @duration=convert(real,format(DATEDIFF(MILLISECOND,@start_time_import,getdate())/1000.0,'N3'))    
		
		SET  @data='{}'
		SET  @data=JSON_MODIFY( @data,'$.N',CONVERT(varchar(10), @imports_fetched))
		SET  @data=JSON_MODIFY( @data,'$.Errors',CONVERT(varchar(10), @errors))
		SET  @data=JSON_MODIFY( @data,'$.Warnings',CONVERT(varchar(10), @warnings))	
		SET  @data=JSON_MODIFY( @data,'$.Deleted',CONVERT(varchar(10), @rows_deleted))
		SET  @data=JSON_MODIFY( @data,'$.Inserted',CONVERT(varchar(10), @rows_inserted))
		SET  @data=JSON_MODIFY( @data,'$.Updated',CONVERT(varchar(10), @rows_updated))
		SET  @data=JSON_MODIFY( @data,'$.DateImportFrom',CONVERT(varchar(10), convert(char(10),convert(date,@date_import_from),126)))
		SET  @data=JSON_MODIFY( @data,'$.DateImportUntil',CONVERT(varchar(10), convert(char(10),convert(date,@date_import_until),126)))	
 
        IF @commands like '%-LOG_IMPORT%' AND @errors=0 BEGIN 
            EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Succeeded', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name
            , @object_id=@import_id, @step=@step, @data=@data, @duration=@duration, @value=@warnings; 
        END
        IF @errors>0  BEGIN   EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Failed', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name
        , @object_id=@import_id, @step=@step, @data=@data, @duration=@duration, @value=@errors; 	 
		END
 
		SET @data= convert(varchar(20),getdate(),120) +' #' + convert(varchar(10),@imports_fetched) + ') import_id=' + convert(varchar(10),@import_id) + ' duration=' + convert(varchar(10),@duration) + ' ' +  @data;
		SET @output=@output + @data  + '</br>';
		PRINT @data;
		

		/*
		
		set @data = left((concat(concat('{"p1":"',@p1,'",'),
        concat('"p2":"',@p2,'",'),
        concat('"p3":"',@p3,'",'),
        concat('"p4":"',@p4,'",'),
        concat('"p5":"',@p5,'"}')) 
        ),4000);
        set @data=JSON_MODIFY( @data,'$.filter',@filter);
        set @data=JSON_MODIFY( @data,'$.group_by',@date);
        set @data=JSON_MODIFY( @data,'$.fields_source',@fields_source);
        set @data=JSON_MODIFY( @data,'$.fields_target',@fields_target);
		 
		*/

    FETCH NEXT FROM TAB_CURSOR 
    INTO @import_id 
        ,@activity_id
        ,@forecast_id
        ,@p1
        ,@p2
        ,@p3
        ,@p4
        ,@p5
        ,@date_import_from
        ,@date_import_until
        ,@fields_source
        ,@fields_target
        ,@schedule
        ,@filter
        ,@source
        ,@date
        ,@commands 
        ,@procedure_name 
        ,@site_id
        ,@parent
    END -- END OF FETCHING IMPORTS
    CLOSE TAB_CURSOR 
    DEALLOCATE TAB_CURSOR

	-------------------------------------------------------------------------------------------------------------------------------
	SET @step= 'SP END';
	--------------------------------------------------------------------------------------------------
	IF @imports_fetched=0 BEGIN
        SET @data= 'No active imports found for ' + @SP + ' SQL SP.';
        SET @output=@output  + @data + '<br>';
        PRINT @data; 
		IF @commands like '%-LOG_WARNING%' BEGIN
			EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @result='Warning', @session=@session_id, @site = @site_id, @object=@SP, @object_sub=@procedure_name, @object_id=@import_id, @step=@step, @data=@data; 
		END
    END
    
    SET  @data='{}'
	SET  @data=JSON_MODIFY( @data,'$.Imports',CONVERT(varchar(10), @imports_fetched))
	SET  @data=JSON_MODIFY( @data,'$.Errors',CONVERT(varchar(10), @errors_global))
	SET  @data=JSON_MODIFY( @data,'$.Warnings',CONVERT(varchar(10), @warnings_global))	
	SET  @data=JSON_MODIFY( @data,'$.Deleted',CONVERT(varchar(10), @rows_deleted_global))
	SET  @data=JSON_MODIFY( @data,'$.Inserted',CONVERT(varchar(10), @rows_inserted_global))
	SET  @data=JSON_MODIFY( @data,'$.Updated',CONVERT(varchar(10), @rows_updated_global))

	SET @duration=convert(real,format(DATEDIFF(MILLISECOND,@start_time,getdate())/1000.0,'N3'))

    IF @errors_global=0 BEGIN
		EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @session=@session_id, @site = @site_id, @object=@SP
		, @step=@step, @duration=@duration, @result='Succeeded', @data=@data, @value=@warnings_global;

	END
	ELSE EXEC dbo.[A_SP_SYS_LOG] @category='MAIS SP', @session=@session_id, @site = @site_id, @object=@SP
		, @step=@step, @duration=@duration, @result='Failed', @data=@data , @value=@errors_global;  

	SET @data = @SP + ' finished. It took ' + convert(varchar(20),@duration) + ' sec.' + @data ; 
	SET @output=@output + '</br>' + @data + '</br>';
	PRINT @data;

-- SNIPPET END  *********************************************************

    DECLARE @version nvarchar(max)='
    <br><i>VERSION INFORMATION </i>
	-- VERSION 20240301 <br>
	-- @p parameter accepts additional parameters in json format<br>
	-- 1. date_import_from<br>
	-- 2. date_import_until<br>
	-- 3. source_import_id_field<br>
	-- 4. intraday_duration<br>
	--  Example: exec [dbo].[A_SP_IMPORT] @site_id=1, @procedure_name=''SUM_DAY_VIEW'', @commands=''-NO_SCHEDULE -OUTPUT'',@p=''{"date_import_from":"2023-01-01"}''<br><br>
    --  VERSION 20230404  <br>
    --  new command -NODAY added, for skipping fact_day update part
	--  VERSION 20230317  <br>
    --  A new @p SP parameter in the json format {"source_import_id_field":"import_id","date_import_from":"2021-01-01","date_import_until":"2021-12-31","intraday_duration":"15"} <br>
	--  It enables a generic interface to pass any parameters used in the import SP and its derivatives
	--  Import @p is merged with @p1 , alowing to overwrite its parameters.
	--  @p2-@p5 can stil be used for an easier syntax

	--  VERSION 20230315  <br>
    --  logging improved, snippets design <br>

    --  VERSION 20230305 
    --  Logging improved

    --  VERSION 20230228 
    --  New parameter -FORCEDELTA, to supres any date range parameters and force max source range

    --  VERSION 20230103 
    --  Explicit filter on A_SP_IMPORT 
    --  Info by no imports found

    --  VERSION 220727
    --  Order of where parameters set to activity first for index reusage.

    <br>
    --  VERSION 220722
    --  Filtering of imports on the procedure category added. Parameter @category
    <br>
    --  VERSION 20220711
    --  scheduling parameter added
    --  more error handling
    --  intraday source fix for empty situation
    <br>
    --  VERSION 20220622
    --  default day and intraday tables are used if the source parameter left empty.
    <br>
    --  version 20220603
    --  generic import of transactional data into time series/ MAIS data format
    --  this SP will generate queries and run/print them for every row from [A_IMPORT_RUN] view
    --  template stored procedure for loading data from source tables';
    IF @commands like '%-VERSION%'  BEGIN SET @output = @output + @version; PRINT @version; END 

    DECLARE @help nvarchar(max)='<br><i>HELP INFORMATION</i>
    <br>
    <br>General import procedure for converting data/transactions from any source to the timeseries format of MAIS.
    <br>Tables [A_FACT_DATE] and optionally [A_FACT_INTRADAY] will be updated from the source data.
    <br>
    <br>Data will be updated withing the measured date range. This range is controlled by procedure/import scheduling parameters.
    <br>Date range in the source data (after filtering) will be automatically measured. MAIS data will be deleted and inserted only in this range.
    <br>Date range is influenced by the procedure and/or import scheduling paramters Days Back/Forward for relative ranges vs the current date,
    <br>or by hard set [Date Import From]/[Date Import Until] parameters for the hard dates. 
    <br>This SP has a limited set of parameters, the rest is picked up from the A_IMPORT_PROCEDURE and A_IMPORT tables using the view A_IMPORT_RUN
    <br>@p1 - @intraday_join
    <br>A_SP_IMPORT PARAMETERS
    <br>@activity_id int = 0    -- run imports for an activity_id.
    <br>@import_id int =0       -- run import_id.
    <br>@session_id nvarchar(50)  = null -- session id for loging, keep empty for an autogenerated uid.
    <br>@procedure_name nvarchar(200) -- the procedure name or an app name to run, use % to broaden the selection
    <br>@site_id int =0 -- site to run
	<br> p SP parameters in json format {"source_import_id_field":"import_id","date_import_from":"2021-01-01","date_import_until":"2021-12-31"} <br>
	Example: exec [dbo].[A_SP_IMPORT] @site_id=1, @procedure_name=''SUM_DAY_VIEW'', @commands=''-NO_SCHEDULE -OUTPUT'',@p=''{"date_import_from":"2023-01-01"}'' <br>
	--  Import p1 is merged with p
	<br>source_import_id_field - if specified, records of the source table will be updated with the all imports accessing those records 
	<br>date_import_from overwrite import configuration

    <br>@commands varchar(2000)
    <br>Supported commands:
    <br>Commands from the procedure and the import will be added to the list (combined) 
    <br><table>
    <tr><td>-PRINT          </td><td>Let skip execution to only output the queries and information.</td></tr>
    <tr><td>-NOGROUPBY      </td><td>Cancels grouping by by group by/date field.</td></tr>
    <tr><td>-SUMFIELDS      </td><td>Adds sum function for all source fields given that a simple commaseparated list is provided.</td></tr>
    <tr><td>-NODELTA        </td><td>Skips any source date range detaction and loads data according to [Date Import From]/[Date Import Until] parameters.</td></tr>
    <tr><td>-FORCEDELTA     </td><td>Supress any date range parameters and force max source range.</td></tr>
    <tr><td>-INTRADAY       </td><td>Triggers intraday table update. The source/view must have interval_id field in line with A_TIME_INTERVAL table</td></tr>
    <tr><td>-NOINTRADAY     </td><td>Skips intraday update even if it was set up in import configuration.</td></tr>
    <tr><td>-NODAY          </td><td>Skips fact_day update.</td></tr>
    <tr><td>-LOG_ROWCOUNT   </td><td>Logs a number of rows affected after all executions to A_SYS_LOG.</td></tr>
    <tr><td>-LOG_QUERY      </td><td>Logs  queries.</td></tr>
	<tr><td>-LOG_WARNING    </td><td>Logs  warnings.</td></tr>
	<tr><td>-LOG_IMPORTS    </td><td>Logs import stats and parameters.</td></tr>
    <tr><td>-NOSCHEDULE     </td><td>Supress scheduling if any and force queries execution.</td></tr>
	<tr><td>-OUTPUT			</td><td>Generate procedure log output in html format for calls from the applications.</td></tr>
    <tr><td>-VERSION        </td><td>Outputs the version information.</td></tr>
    <tr><td>-HELP           </td><td>Outputs help information.</td></tr>
	
    <tr><td> </td><td></td></tr>
    </table>
    ';
    IF @commands like '%-HELP%'  BEGIN SET @output = @output + @help ; PRINT @help; END 

    IF @commands like '%-OUTPUT%'  select @output as SQL_OUTPUT

END
